****************************************************************************************************
react
****************************************************************************************************

*intro
*components
*JSX
*multiple components
*create react app
*import export 
*props

****************************************************************************************************
*intro


  React is not really that much of a framework by itself it is more of a view library that uses composable components

  React is not only used in web development, it is also used with vr and smartphone apps
    these use different libararies in addition to react
    the core component of react is seperated from the dom component so both need to be used when creating web views with react
    an additional common library is react dom factories which can be used to create dom elements
    
      <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>               // core react component
      <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>       // dom development component
      <script src="https://unpkg.com/react-dom-factories@1.0.0/index.js"></script>                  // dom factores


****************************************************************************************************
*components


  all components deal with the view in some way -> the view is how components are displayed on the screen
  every component needs to have a render method
    the render method returns html that you want to have put in the DOM using react dom factores compoenent

  common librairies used with react
    react router -> deals with navigation
    redux        -> a single place to store state in the application

  composable components
    an application has many components
      a component can be paramiteratized, meaning you can pass in data through parameters such as a url, image, timestamp
      reactDOM can be used to render components on the page 

    example :

      <script type="text/javascript">
        class Pet extends React.Component {
          render() {
            const h2 = ReactDOMFactories.h2(null, 'Moxie');
            const img = ReactDOMFactories.img({
              src : "https://github.com/tigarcia/Moxie/raw/master/moxie.png",
              alt : "Moxie the cat",
            });
            return ReactDOMFactories.div(null, h2, img);
          }
        }

        ReactDOM.render(React.createElement(Pet), document.getElementById('app'));
      </script>

    the class builds and returns the compoenent inside the render method
    ReactDom is used to create an element using the class (factory) 'Pet' 
      and render the element onto the page by selecting which element to append it to


****************************************************************************************************
*JSX

  ** when working with JSX you cannot get away with not closing html tags **
    <img src="" alt="" />

  babel -> a general purpose transpiler that converts one type of source code to another type
             started out being used to transpile es5 to es6 but now used more generally

  with react babel is used to convert JSX into vanila javaScript
    this allows us to skip writing all the DOM factories code and write JSX instead

  for JSX instead of using react dom factories we can use babel
    you also need to change the script type="text/javascript" to type="text/babel"

      <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>                  // core react component
      <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>          // dom development component
      <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js"></script>  // babel instead of dom factories

      <script type="text/babel"></script>  // this signals to babel that it is not a normal javascript file but needs to be transpiled by babel


    example :

        <script type="text/babel">
          class Pet extends React.Component {
            render() {
              return (
                <div>
                  <h2>Moxie</h2>
                  <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
                </div>
              )
            }
          }

          ReactDOM.render(<Pet />, document.getElementById('app'));
        </script>


  However there is a problem with returning html by compiling it through babel
    since babel uses javascript to compile the html, anything reserved keywords in javascript are used inside the html there will be unintended concequences
    class="container"  // there is a problem with javascript seeing class as a reserved word so instead you need to use className

    return (
        <div className="container">
      )

  **************************************************
  styles

    inline styles can also be added programatically instead of css classes or id's
    inline styles can be useful when you only need the styles to apply to that component (not abailable globally)

    styles take an object, which represents the css
    instead of using hyphens like you normally would with css you need to use camel case

      example :

        render() {
          const listStyle = {fontSize: '1.5em'};  // assign you styles inside the render method above the return html using camel case
          return (
            <div>
              <h2>Moxie</h2>
              <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
              <h5 style={{fontSize : '2em', margin : '10px'}}>Hobbies</h5>  // the object containing the styles can also be added directly
              <ul>
                <li style={listStyle}>element 1</li>   // add the style to the element
                <li style={listStyle}>element 2</li>   
              </ul>
            </div>
          )
        }

  **************************************************
  iterating over data
    
    with react you can iterate directly over the html
    however there each component must have a unique key (in the example we use the index but this is not good practice if you need to remove data)

      example :

        render() {
          const listStyle = {fontSize: '1.5em'};
          const hobbies = ['Sleep', 'Eat', 'Play', 'Cuddle'];
          return (
            <div className="card">
              <h2 className="name">Moxie</h2>
              <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
              <h5 style={{fontSize : '2em', margin : '10px'}}>Hobbies</h5>
                <ul>
                  {hobbies.map((v, i) => <li key={i} style={listStyle}>{v}</li>)}
                </ul>
            </div>
          )
        }


****************************************************************************************************
*multiple components

  example :

    <body>
      <div id="app"></div>

      <script type="text/babel">
        class Hobby extends React.Component {
          render() {
            const hobbies = ['Sleep', 'Eat', 'Play', 'Cuddle'];
            return (
              <ul>
                {hobbies.map((v, i) => {
                  return <li key={i} style={{fontSize:"2em"}}>{v}</li>
                })}
              </ul>
            )
          }
        }

        class Pet extends React.Component {
          render() {
            const listStyle = {fontSize: '1.5em'};
            return (
              <div className="card">
                <h2 className="name">Moxie</h2>
                <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
                <h5 style={{fontSize : '3em', margin : '10px'}}>Hobbies</h5>
                <Hobby />
              </div>
            )
          }
        }

        ReactDOM.render(<Pet />, document.getElementById('app'));
      </script>
    </body>


****************************************************************************************************
*create react app

  allows you to create a react app quickly

  $ create-react-app <app name>

  **************************************************
  webpack

    webpack is already configured when running create-react-app

    the public folder
      -> contains files that don't go through the webpack build process
           this is where we keep the index.html page that is delivered to the client

****************************************************************************************************
*import export 

  there are two different ways to import and export data (using default or non-default)

    default (does not require the curly braces)
      import App from './App';                 export default App;
      import Pizza from './App';               export default App;    // the name can be changes

    non-default
      import { App } from './App';             export { App };
      import { App as Pizza } from './App';    export { App };        // the name needs 'as' in order to be changed

    

**************************************************************************************************** 
*props

  props are accessible in a component through the object this.props
    this referes to the instance of the class (component)

    class Pet extends Component {
      return (<div>{this.props.text}</div>)
    }

    we can alter the text when we render the component by passing in the text as an attribute
    <Pet text="I am text"/>

  props is used to hold immutable data
    xthis.props = 'happy'      // you cannot change the text (typeError)
    xthis.props = {}           // you can do this but it is not good practice
    xthis.props.newProp = 'hi' // also works but you shouldn't do it


