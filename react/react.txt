****************************************************************************************************
react
****************************************************************************************************

*intro
*components
*JSX
*multiple components
*create react app
*import export 
*props
*state
*react component architecture
*handling events

****************************************************************************************************
*intro


  React is not really that much of a framework by itself it is more of a view library that uses composable components

  React is not only used in web development, it is also used with vr and smartphone apps
    these use different libararies in addition to react
    the core component of react is seperated from the dom component so both need to be used when creating web views with react
    an additional common library is react dom factories which can be used to create dom elements
    
      <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>               // core react component
      <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>       // dom development component
      <script src="https://unpkg.com/react-dom-factories@1.0.0/index.js"></script>                  // dom factores


****************************************************************************************************
*components


  all components deal with the view in some way -> the view is how components are displayed on the screen
  every component needs to have a render method
    the render method returns html that you want to have put in the DOM using react dom factores compoenent

  common librairies used with react
    react router -> deals with navigation
    redux        -> a single place to store state in the application

  composable components
    an application has many components
      a component can be paramiteratized, meaning you can pass in data through parameters such as a url, image, timestamp
      reactDOM can be used to render components on the page 

    example :

      <script type="text/javascript">
        class Pet extends React.Component {
          render() {
            const h2 = ReactDOMFactories.h2(null, 'Moxie');
            const img = ReactDOMFactories.img({
              src : "https://github.com/tigarcia/Moxie/raw/master/moxie.png",
              alt : "Moxie the cat",
            });
            return ReactDOMFactories.div(null, h2, img);
          }
        }

        ReactDOM.render(React.createElement(Pet), document.getElementById('app'));
      </script>

    the class builds and returns the compoenent inside the render method
    ReactDom is used to create an element using the class (factory) 'Pet' 
      and render the element onto the page by selecting which element to append it to


****************************************************************************************************
*JSX

  ** when working with JSX you cannot get away with not closing html tags **
    <img src="" alt="" />

  babel -> a general purpose transpiler that converts one type of source code to another type
             started out being used to transpile es5 to es6 but now used more generally

  with react babel is used to convert JSX into vanila javaScript
    this allows us to skip writing all the DOM factories code and write JSX instead

  for JSX instead of using react dom factories we can use babel
    you also need to change the script type="text/javascript" to type="text/babel"

      <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>                  // core react component
      <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>          // dom development component
      <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js"></script>  // babel instead of dom factories

      <script type="text/babel"></script>  // this signals to babel that it is not a normal javascript file but needs to be transpiled by babel


    example :

        <script type="text/babel">
          class Pet extends React.Component {
            render() {
              return (
                <div>
                  <h2>Moxie</h2>
                  <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
                </div>
              )
            }
          }

          ReactDOM.render(<Pet />, document.getElementById('app'));
        </script>


  However there is a problem with returning html by compiling it through babel
    since babel uses javascript to compile the html, anything reserved keywords in javascript are used inside the html there will be unintended concequences
    class="container"  // there is a problem with javascript seeing class as a reserved word so instead you need to use className

    return (
        <div className="container">
      )

  **************************************************
  styles

    inline styles can also be added programatically instead of css classes or id's
    inline styles can be useful when you only need the styles to apply to that component (not abailable globally)

    styles take an object, which represents the css
    instead of using hyphens like you normally would with css you need to use camel case

      example :

        render() {
          const listStyle = {fontSize: '1.5em'};  // assign you styles inside the render method above the return html using camel case
          return (
            <div>
              <h2>Moxie</h2>
              <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
              <h5 style={{fontSize : '2em', margin : '10px'}}>Hobbies</h5>  // the object containing the styles can also be added directly
              <ul>
                <li style={listStyle}>element 1</li>   // add the style to the element
                <li style={listStyle}>element 2</li>   
              </ul>
            </div>
          )
        }

  **************************************************
  iterating over data
    
    with react you can iterate directly over the html
    however there each component must have a unique key (in the example we use the index but this is not good practice if you need to remove data)

      example :

        render() {
          const listStyle = {fontSize: '1.5em'};
          const hobbies = ['Sleep', 'Eat', 'Play', 'Cuddle'];
          return (
            <div className="card">
              <h2 className="name">Moxie</h2>
              <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
              <h5 style={{fontSize : '2em', margin : '10px'}}>Hobbies</h5>
                <ul>
                  {hobbies.map((v, i) => <li key={i} style={listStyle}>{v}</li>)}
                </ul>
            </div>
          )
        }


****************************************************************************************************
*multiple components

  example :

    <body>
      <div id="app"></div>

      <script type="text/babel">
        class Hobby extends React.Component {
          render() {
            const hobbies = ['Sleep', 'Eat', 'Play', 'Cuddle'];
            return (
              <ul>
                {hobbies.map((v, i) => {
                  return <li key={i} style={{fontSize:"2em"}}>{v}</li>
                })}
              </ul>
            )
          }
        }

        class Pet extends React.Component {
          render() {
            const listStyle = {fontSize: '1.5em'};
            return (
              <div className="card">
                <h2 className="name">Moxie</h2>
                <img src="https://github.com/tigarcia/Moxie/raw/master/moxie.png" alt="Moxie the cat" />
                <h5 style={{fontSize : '3em', margin : '10px'}}>Hobbies</h5>
                <Hobby />
              </div>
            )
          }
        }

        ReactDOM.render(<Pet />, document.getElementById('app'));
      </script>
    </body>


****************************************************************************************************
*create react app

  allows you to create a react app quickly

  $ create-react-app <app name>

  **************************************************
  webpack

    webpack is already configured when running create-react-app

    the public folder
      -> contains files that don't go through the webpack build process
           this is where we keep the index.html page that is delivered to the client

****************************************************************************************************
*import export 

  there are two different ways to import and export data (using default or non-default)

    default (does not require the curly braces)
      import App from './App';                 export default App;
      import Pizza from './App';               export default App;    // the name can be changes

    non-default
      import { App } from './App';             export { App };
      import { App as Pizza } from './App';    export { App };        // the name needs 'as' in order to be changed

    

**************************************************************************************************** 
*props

  props are accessible in a component through the object this.props
    this referes to the instance of the class (component)

    class Pet extends Component {
      return (<div>{this.props.text}</div>)
    }

    we can alter the text when we render the component by passing in the text as an attribute
    <Pet text="I am text"/>

  props is used to hold immutable data
    xthis.props = 'happy'      // you cannot change the text (typeError)
    xthis.props = {}           // you can do this but it is not good practice
    xthis.props.newProp = 'hi' // also works but you shouldn't do it


  **************************************************
  default props

      if you are iterating over prop values but there are not props specified you will recieve an error 'cannot iterate null'
      to prevent this you can use default props

        example1 :

          class Ingredients extends Component {
            static defaultProps = {
              ingredients: []
            }

            render() {
              return (
                {this.props.ingredients.map((v, i) => <p key={i}>{v}</p>)}
              )
            }
          }

          if props values are null then an error will not be thrown


        example2 : different syntax but same thing

          class Ingredients extends Component {
            render() {
              return (
                {this.props.ingredients.map((v, i) => <p key={i}>{v}</p>)}
              )
            }
          }

          Ingredients.defaultProps = {
              ingredients: []
          }


  **************************************************
  prop types

    are a development time checker for you props, allows you to specify the type of default value a prop is
    ** prop types only work in development, they will not work in production **

    documentation => search typechecking with proptypes

        $ npm install --save prop-types

          example1 :

            import PropTypes from 'prop-types';

            class Ingredients extends Component {
              static propType = {
                ingredients: PropTypes.arrayOf(PropTypes.string).isRequired;  // the data type must be an array of strings and is required
              }                                                               // if these are not met you will get a warning in the console

              render() {
                return (
                  <ul>
                    {this.props.ingredients.map((ing, index) => (
                      <li key={ingex}>{ing}</li>
                    ))}
                  </ul>
                )
              }
            }

          example2 :

            import PropTypes from 'prop-types';

            class Greeting extends Component {
              render() {
                return (
                    <h1>Hello, {this.props.name}</h1>
                    );
              }
            }

            Ingredients.propTypes = {
              name: PropTypes.string,                        // a single peice of data
            }

            // additional examples

              Ingredients.propTypes = {
                data: PropTypes.arrayOf(PropTypes.object).isRequired,     // an array of objects
              }

              Recipe.propTypes = {
                title : PropTypes.string.isRequired,
                instructions : PropTypes.string.isRequired,
                ingredients : PropTypes.arrayOf(PropTypes.string).isRequired,
                img : PropTypes.string.isRequired,
              }


  **************************************************
  spread opperator

    if you are going to use the same name for the value names then it is easier to use the spread opperater
    it is considered sloppy code when you use this too liberally, for example when you are passing unecessary data to components

      example :

        before :

          render() {
            return (
              <div>
                {this.props.recipies.map((v, i) => (
                  <Recipie 
                    key={i}
                    title={v.title}
                    ingredients={v.ingredients}
                    img={v.img} 
                    instructions={v.instructions}
                  />
                ))}
              </div>
            )
          }

        after :

          render() {
            return (
              <div>
                {this.props.recipies.map((v, i) => (
                  <Recipie key={i} {...r}/>
                ))}
              </div>
            )
          }


  **************************************************
  props.children

    a collection of children inside a component
    ???? missing only a blog post that doesn't work
    https://mxstbr.blog/2017/02/react-children-deepdive/


****************************************************************************************************
*state

  state is data in your application that can change
  props cannot be changed but state can
  just like props we should not modify state directly
  
  instanciating state

    example :

      class App extends Component {
        constructor(props) {
          super(props);
          this.state = {favColor: 'blue'};  // we assign state to an object that holds data in our application that we might want to change
        }

        render() {
          return (
            <p>
              My Favorite Color is : {this.state.favColor}
            </p>
          )
        }
      }

  updating state
    the correct way to change state is with this.setState({ });
    steState allows you to define a new object with all the properties that you want to overwrite in the old version of state
    using set state ensures that your functions are pure (not modifiying the global state)

    example :

      when the state is updated render() will be invoked
      when render is invoked a new view (dom) will get updated

      class App extends React.Component {
        constructor(props) {
          super(props);
          this.state = {favColor: 'red'};

          setTimeout(() => {
            this.setState({favColor: 'blue'})
          }, 2000)
        }
        render() {
          return (
            <p>
              My favorite Color is : {this.state.favColor}
            </p>
          )
        }
      }

  ************************************************** 
  Lifecycle hooks

    it is important to free up memroy when components are destroyed
    this can be done through lifecycle hooks

      example :

        class Clock extends React.Component {
          constructor(props) {
            super(props);
            this.state = {date: new Date()};  // we want this state to change every second
          }

          componentDidMount() {
            this.clockId = setInterval(() => this.tick(), 1000);  // componentDidMount is a lifecycle method that mounts the component automatically
          }

          componentWillMount() {
            clearInterval(this.clockId);  // if the component is removed from the page componentWillMount() is run, in this case clearning the interval
          }

          tick() {
            this.setState({date : new Date()}) // setState runs the render method below 
          }

          render () {  // the this.state object can be used freely attach peices of state but only if it is being used in render()
            return (
              <div>
                <h1>Clock</h1>
                <h3>{this.state.date.toLocaleTimeString()}</h3>
              </div>
            )
          }
        }

  ReactDOM.render(<Clock />, document.getElementById('root'));
  registerServiceWorker();
  


  ************************************************** 
  pure functions 

    pure functions do not have side effects (they do not modify their inputs or any global state, they are repeatable)
    we can create a pure function that does not mutate the original obj using Object.assign()

      example : Object.assign()
      
        let person1 = {
          name: 'nate',
          job: 'teacher'
        }

        function updateJob(obj, job) {
          return Object.assign({}, obj, {job});
        }

        console.log(updateJob(person1, 'developer'));   // { name: 'nate', job: 'developer' }
        console.log(person1);                           // { name: 'nate', job: 'teacher' }


    The spread opperator allows you to change multiple values without stating each of them 

      example : using spread opperator

        function updatePerson(obj, name, job) {
          return {...obj, name, job};
        }

        console.log(updatePerson(person1, 'Nate Lipp', 'Developer'));    // { name: 'Nate Lipp', job: 'Developer' }
        console.log(person1);                                            // { name: 'nate', job: 'teacher' } 


  **************************************************
  modifying state without side effects

    example1 : modifying state wth Object.assign()

      class App extends Component {
        constructor(props) {
          super(props);
          this.state = {
            instructors: [
              { name: 'Tim', hobbies: ['sailing', 'react']}, 
              { name: 'Matt', hobbies: ['math', 'd3']}, 
              { name: 'Colt', hobbies: ['css', 'hiking']}, 
              { name: 'Elie', hobbies: ['music', 'es2015']}
            ]
          };

          setTimeout(() => {
            const randInst = Math.floor(Math.random() * this.state.instructors.length);                      // get random instructor index
            const randHobby = Math.floor(Math.random() * this.state.instructors[randInst].hobbies.length);   // get random hobby index

            const instructors = this.state.instructors.slice();               // makes a copy of the state
            instructors[randInst] = Object.assign({}, instructors[randInst])  // use Object.assign() to create a new object of the object you want to mutate 
            instructors[randInst].hobbies = instructors[randInst].hobbies.slice(); // copy that newly created object
            instructors[randInst].hobbies.splice(randHobby, 1);               // mutating the copy of the new object will not mutate the original state
            this.setState({instructors})                                      // set the state without permenantly affecting the original state object
                                                                              // setState() will also render() the page
          }, 2000);
        }

        render() {
          const instructors = this.state.instructors.map((instructor, index) => (
            <li key={index}>
              <h3>{instructor.name}</h3>
              <h4>Hobbies: {instructor.hobbies.join(", ")}</h4>
            </li>
          ));
          return (
            <div className="App">
              <ul>
                {instructors}
              </ul>
            </div>
          );
        }
      }

    example2 : modifying state wth the map

      setTimeout(() => {
        const randInst = Math.floor(Math.random() * this.state.instructors.length);                      // get random instructor index
        const randHobby = Math.floor(Math.random() * this.state.instructors[randInst].hobbies.length);   // get random hobby index

        let instructors = this.state.instructors.map((inst, i) => {
          if (i === randInst) {
            const hobbies = [...inst.hobbies];                 // make a copy of the hobbies array (same as inst.hobbies.slice())
            inst.hobbies = hobbies.splice(randHobby, 1);       // set the return value of the spliced (removed) element to inst.hobbies
            return {
              name: inst.name,
              hobbies: hobbies,
            }
          } 

          return inst;
        });

        this.setState({instructors}) 


****************************************************************************************************
*react component architecture

  where to put state in your application and how props and state should interact together
    pass state to child components as props
    define which components own state
    use stateless functional components

    how is state shared
      state is always passed downward from a parent to a child component -> the child compoenet gets the state from the parent as a prop
      state should not be passed to a sibling or a parent

    state should be owned by one component
        the compoenent owning the state should be above all other components that need to use it
          example => if you have game component and a navbar component and the navbar has a reset button. 
            then state would have to be in a component above both the game component and the navbar so that the game could be reset
            all of the state for the game should be owned by one component


    ************************************************** 
    stateless functional components

      components that are implemented using a function not a class
      the function implements the render() method only (no constructor, no state)

      if you component dosen't have any state it is a good idea to change you component into a stateless functional component
        because it is cleaner and may provide better performance


        example : 

          import React from 'react';

          const Greeting = props => {
            <h1>Hello, {props.name}</h1>
          }

          export default Greeting;


        example2 : 

          const Instructors = props => {
            return (
              <li>
                <h3>{props.name}</h3>
                <h4>Hobbies: {props.hobbies.join(", ")}</h4>
              </li>
            )
          }

          Instructors.propTypes = {
            name: PropTypes.string,
            hobbies: PropTypes.arrayOf(PropTypes.string),
          }


****************************************************************************************************
*handling events

  example : vanila javascirpt

    <button onclick="activateLasers()">
      Activate Lasers
    </button>


  example : React

    <button onClick={activateLasers}>
      Activate Lasers
    </button>

